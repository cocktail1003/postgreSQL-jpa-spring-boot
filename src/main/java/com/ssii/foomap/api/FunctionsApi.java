/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.ssii.foomap.api;


import com.ssii.foomap.model.NameValuePair;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import java.math.BigDecimal;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-09-11T08:16:31.504Z")

@Api(value = "functions", description = "the functions API")
public interface FunctionsApi {

    @ApiOperation(value = "查询，框选查询点查询", nickname = "containQuery", notes = "", response = NameValuePair.class, responseContainer = "List", tags={ "地图功能", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = NameValuePair.class, responseContainer = "List") })
    @RequestMapping(value = "/functions/contain",
        method = RequestMethod.GET)
    ResponseEntity<List<NameValuePair>> containQuery(@ApiParam(value = "用户登录成功后的Token" ,required=true) @RequestHeader(value="authoration", required=true) String authoration, @ApiParam(value = "查询目标，在哪些图层里进行查询" ) @RequestHeader(value="layers", required=false) List<String> layers, @ApiParam(value = "是否严格模式，严格模式下只查询包含在内的数据，非严格模式相交的数据也作为查询结果") @Valid @RequestParam(value = "strict", required = false) Boolean strict, @ApiParam(value = "查询的框图形，多边形") @Valid @RequestParam(value = "box", required = false) List<BigDecimal> box);


    @ApiOperation(value = "查询，点查询", nickname = "identify", notes = "", response = NameValuePair.class, responseContainer = "List", tags={ "地图功能", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = NameValuePair.class, responseContainer = "List") })
    @RequestMapping(value = "/functions/identify",
        method = RequestMethod.GET)
    ResponseEntity<List<NameValuePair>> identify(@ApiParam(value = "用户登录成功后的Token" ,required=true) @RequestHeader(value="authoration", required=true) String authoration,@ApiParam(value = "查询目标，在哪些图层里进行查询" ) @RequestHeader(value="layers", required=false) List<String> layers,@ApiParam(value = "点查询的坐标点") @Valid @RequestParam(value = "point", required = false) List<BigDecimal> point,@ApiParam(value = "点查询的缓冲范围") @Valid @RequestParam(value = "redius", required = false) BigDecimal redius,@ApiParam(value = "地图显示范围") @Valid @RequestParam(value = "bounds", required = false) List<BigDecimal> bounds);


    @ApiOperation(value = "查询，属性查询", nickname = "search", notes = "", response = NameValuePair.class, responseContainer = "List", tags={ "地图功能", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK,查询到的结果以GeoJSON字符串返回", response = NameValuePair.class, responseContainer = "List") })
    @RequestMapping(value = "/functions/search",
        method = RequestMethod.GET)
    ResponseEntity<List<NameValuePair>> search(@ApiParam(value = "用户登录成功后的Token" ,required=true) @RequestHeader(value="authoration", required=true) String authoration,@ApiParam(value = "查询目标，在哪些图层里进行查询" ) @RequestHeader(value="layers", required=false) List<String> layers,@ApiParam(value = "全文查询的关键词") @Valid @RequestParam(value = "keywords", required = false) String keywords,@ApiParam(value = "自定义查询，通过自定义sql where=后面的字符来进行查询") @Valid @RequestParam(value = "where", required = false) String where,@ApiParam(value = "地图显示范围") @Valid @RequestParam(value = "bounds", required = false) List<BigDecimal> bounds);

}
